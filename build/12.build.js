webpackJsonp([12,14],{26:function(s,a,p){var e,r,n={};r=p(27),s.exports=e||{},s.exports.__esModule&&(s.exports=s.exports.default);var t="function"==typeof s.exports?s.exports.options||(s.exports.options={}):s.exports;r&&(t.template=r),t.computed||(t.computed={}),Object.keys(n).forEach(function(s){var a=n[s];t.computed[s]=function(){return a}})},27:function(s,a){s.exports=' <div class=border-box v-cloak> <h1>Border</h1> <p>几种常见的边框用法。</p> <h3>目录</h3> <p>透明边框的实现</p> <p>多层边框的几种实现方法</p> <p>border-radius 圆角的使用</p> <p>border-image 边框背景详解</p> <h3>透明边框</h3> <p>先看效果图:</p> <div class="examples feature"> <div class=border-content> <div class="border-item border-transparent"></div> </div> </div> <p>浏览器默认从边框外沿剪裁背景图, 所以为了使边框透明, 需将浏览器的剪裁范围缩小到内边距的外沿, 而<span class=point-text> background-clip </span>属性正好可以实现此效果。 </p> <p><span class=point-text>background-clip </span>属性的默认值为 border-box , 即浏览器默认剪裁背景到边框外边框, 可将它的值设为 padding-box , 这样浏览器就会从内边距的外沿来剪裁背景。</p> <p>代码示例</p> <div class="code feature"> <div class=examples> <span class=cv>border: </span><span class=d>15px solid rgba(255,255,255,0.5) ;</span><br> <span class=cv>background: </span><span class=d>white ;</span><br> <span class=cv>background-clip: </span><span class=d>padding-box ;</span> </div> </div> <h3>多层边框的几种实现方法</h3> <p>以下效果均只使用一个元素实现。</p> <p>常见的实现方法有两种, <span class=point-text> box-shadow </span>方案以及<span class=point-text> outline </span>方案。</p> <p>效果图:</p> <div class="examples feature"> <div class="border-item border-mul-outline" style="float:left;margin-right: 100px"><p>outline方案, 最多是能实现两层边框</p> </div> <div class="border-item border-mul-shadow" style=float:left><p>box-shadow方案, 可实现多重边框</p></div> </div> <p>利用 box-shadow 实现多重边框, 不会影响布局, 不受 box-sizing 影响, 可通过内外边距来模拟边框所需占据的空间。</p> <p>代码示例</p> <div class=code> <div class=examples> <span class=cv>border: </span><span class=d>5px solid #fb3 ;</span><br> <span class=cv>outline: </span><span class=d>5px solid #58a ;</span> </div> </div> <div class=code> <div class=examples> <span class=cv>border: </span><span class=d>5px solid #fb3 ;</span><br> <span class=cv>box-shadow: </span><span class=d>0 0 0 5px #58a, 0 0 0 5px #fb3 ;</span> </div> </div> <p>注意: <span class=point-text>outline </span>描边绝大多数情况下都是矩形, 所以如果想实现带圆角的多重边框, 可以选择使用<span class=point-text> box-shadow</span> 。</p> <p>圆角情况下outline描边效果图:</p> <div class=examples> <div class="border-item border-mul-outline-radius"></div> </div> <h3>border-radius 圆角的使用</h3> <p>IE9+、Firefox 4+、Chrome、Safari 5+ 以及 Opera 支持 border-radius 属性。为支持低版本, 最好增加带有-webkit-前缀的写法。</p> <p><span class=point-text>border-radius</span> 可以分别设置水平半径和垂直半径, 以 "/" 分隔, 水平和垂直半径都可以设置1-4个值,分别指定四个角的半径, 可以是具体的长度值也可以是百分比。<br> 如: <span class=point-text>border-radius: 50% 40% / 10% 20%;</span> 斜线"/"之前的表示水平半径, 之后的表示垂直半径。</p> <p>不论是水平半径还是垂直半径都遵循一下<span class=point-text>规则</span>: <br> 如果只设置一个值，将用于全部的四个角; <br> 如果设置两个值，第一个用于左上角、右下角，第二个用于右上角、左下角;<br> 如果设置三个值，第一个用于左上角，第二个用于右上角和左下角，第三个用于右下角。[可以联想margin]<br> </p> <p><span class=point-text>border-radius</span> 是一个简写属性, 分别指定左上角[border-top-left-radius]、右上角[border-top-right-radius]、右下角[border-bottom-right-radius]、左下角[border-bottom-left-radius]的圆角半径。 </p> <h4>自适应椭圆的实现</h4> <p>这里需要使用百分比。</p> <p>代码示例</p> <div class=code> <div class=examples> <span class=cv>border-radius: </span><span class=d>50% /50% ;</span><br><span class=v>或者</span><br><span class=cv>border-radius: </span><span class=d>50% ;</span> </div> </div> <p>注意: 这里设置的百分比不论是单独指定水平半径、垂直半径还是统一指定, 均是根据百分比, 分别相对<span class=point-text> border box </span>的宽度和高度进行计算。也就是说相同的百分比可能会计算出不同的水平和垂直半径。 </p> <p>比如设置<span class=point-text> border-radius: 50% </span>, border box的宽度高度分别是200px 100px, 则根据<span class=point-text>50%</span>计算出的水平半径为<span class=point-text>100px</span>, 垂直半径为<span class=point-text>50px</span>。</p> <p>效果图:</p> <div class=examples> <div class="border-item border-oval"></div> </div> <h4>自适应半椭圆以及自适应四分之一椭圆</h4> <p>效果图:</p> <div class="examples feature"> <div class="border-item border-oval-2" style="float: left;margin-right: 50px"></div> <div class="border-item border-oval-4" style="float: left"></div> </div> <p>上图中<span class=point-text>半椭圆</span>水平对称, 所以左上角和左下角的半径相等, 右上角和右下角的半径相等; <br> 图中整个左侧是一条曲线且占据了整个宽度, 也就是说左上角和左下角的垂直半径之和等于整个形状的高度, 水平半径应该为整个形状的宽度;<br> 而右侧没有任何圆角, 所以右上角的右下角的垂直半径之和也应该为整个形状的高度, 水平方向为0。</p> <p>观察上图中的<span class=point-text>四分之一椭圆</span>, 很容易可以看出整个圆角都集中在左上角, 而其他三个角都没有圆角。</p> <p>代码示例</p> <div class=code> <div class=examples> <span class=v>半椭圆</span> <span class=cv>border-radius: </span><span class=d>100% 0 0 100% / 50%;</span><br> <span class=v>1/4椭圆</span><span class=cv>border-radius: </span><span class=d>100% 0 0 0;</span> </div> </div> <p>其他形状多变的圆角效果图:</p> <div class="examples feature"> <div class="border-item border-s-1" style="float: left;margin-right: 50px"></div> <div class="border-item border-s-2" style="float: left;margin-right: 50px"></div> <div class="border-item border-s-3" style="float: left;margin-right: 50px"></div> <div class="border-item border-s-4" style="float: left;margin-right: 50px"></div> <div class="border-item border-s-5" style="float: left"></div> </div> <p>代码示例</p> <div class=code> <div class=examples> <span class=v>1、 </span><span class=cv>border-radius: </span><span class=d>50% / 100%;</span><br> <span class=v>2、 </span><span class=cv>border-radius: </span><span class=d>10% / 50%;</span><br> <span class=v>3、 </span><span class=cv>border-radius: </span><span class=d>10% 50% / 100%;</span><br> <span class=v>4、 </span><span class=cv>border-radius: </span><span class=d>100% 10% 10% 10%;</span><br> <span class=v>5、 </span><span class=cv>border-radius: </span><span class=d>40% 40% 20% 20% / 100% 100% 50% 50%;</span><br> </div> </div> <p><span class=point-text>注意: 当任意两个相邻圆角的半径之和超过border box的尺寸时, 用户代理必须按比例减小各个边框所使用的值, 直到它们不会相互重叠为止。</span>拿上图中最后一个图形举例说明。 </p> <p>假设盒子的宽高分别为: 800px 400px, 按照border-radius设置的百分比半径, 分别计算: <br>左上角半径：320px 400px 右上角半径：320px 400px <br> 左下角半径：160px 200px 右下角半径：160px 200px</p> <p>很明显, 此时<span class=point-text>左上角和左下角的垂直半径之和[400px+200px]大于盒子的高度[400px], 同理右上角和右下角的垂直半径之和也大于盒子的高度</span>。 </p> <p>根据上述理论, 用户代理必须按比例减小各个边框所使用的值, 直到它们不会相互重叠为止。<span class=point-text>当然按比例缩小这一步操作是由浏览器完成, 下面只是模拟浏览器绘制圆角边框的过程。</span><br>缩小后的半径为:<br>左上角半径：320px 267px 右上角半径：320px 133px <br> 左下角半径：160px 133px 右下角半径：160px 267px</p> <p>左上角和左下角根据新的半径, 画圆效果如下图所示:</p> <div class="examples feature"> <p>蓝色线为左上角半径画圆, 黄色线为左下角半径画圆</p> <div class=border-error-examples></div> </div> <p>最终效果图:</p> <div class="examples feature"> <div class=border-right-examples></div> </div> <p>当然, 除了可以实现各类圆角按钮, 还可以做一些更有意思的事情, 比如一个<span class=point-text><router-link to=/funny/minions>小黄人</router-link></span>, 再或者一个<span class=point-text><router-link to=/funny/minions>萌萌的大叔</router-link></span>。 </p> <h3>border-image 边框背景详解</h3> <p><span class=point-text>border-image</span>属性可指定边框样式使用图像来填充, 图像可以是绝对或相对地址引入的图片, 也可以是渐变色。使用时, 需指定 <span class=point-text>border-style</span> 指定边框样式。</p> <p>IE11+、Firefox 3.5+、Chrome、Safari 以及 Opera 支持 border-image 属性。为支持低版本, 最好增加带有-moz-以及-webkit-前缀的写法。</p> <p>border-image为简写属性, 可分别设置以下5个属性的值: <span class=point-text>border-image-source</span>、<span class=point-text>border-image-slice</span>、<span class=point-text>border-image-width</span>、<span class=point-text>border-image-outset</span>、<span class=point-text>border-image-repeat</span>。 属性之前可用"/"分隔。</p> <p>1、border-image-source</p> <p>取值: <span class=point-text>none | image</span> ; 当值为none时, 会自动使用<span class=point-text> border-style </span>的值。</p> <p>2、border-image-slice 指定图片分隔的长度</p> <p>取值: <span class=point-text>{1,4} [number | %] && fill</span> ; 注意, 使用number时, 默认单位为像素, 所以不需要加上单位, 另外百分比是分别相对盒子的宽和高。</p> <p>border-image-slice属性指定从上，右，下，左方位来分隔图像，将图像分成4个角，4条边和中间区域共9份，中间区域始终是透明的（即没图像填充），除非加上关键字 fill, 此时中间区域会覆盖背景。</p> <div class="examples feature"> <p>边框背景图宽度和高度均是180像素, 盒子的背景颜色选择的是蓝色。第一个未设置 fill, 所以中间部分为透明。</p> <div class="border-item border-img-1" style="float: left; margin-right: 50px"></div> <div class="border-item border-img-2" style="float:left;margin-right: 50px"></div> <div class=border-examples style=float:left></div> </div> <p>3、border-image-width 指定边框背景的宽度</p> <p>取值: <span class=point-text>{1,4} number | % | length | auto</span> ; 注意, 这里的number是相对于<span class=point-text> border-width </span>的倍数, 如 <span class=point-text>border-image-width: 1 ;</span><br> 如果没有指定<span class=point-text> border-image-width </span>的值, 则取<span class=point-text> border-wdith </span>的值。 </p> <p>4、border-image-outset 指定偏移距离</p> <p>取值: <span class=point-text>{1,4} number | length</span> ; number是相对于<span class=point-text> border-width </span>的倍数。</p> <div class="examples feature"> <p>指定偏移距离为10像素 <span class=point-text>border-image-outset: 10px;</span></p> <div class="border-item border-img-3"></div> </div> <p>5、border-image-repeat 指定边框背景的平铺方式</p> <p>取值: <span class=point-text>{1,2} 拉伸stretch | 重复repeat | 环绕round</span> ;</p> <p>可1-2个值, 两个值表示水平[只对上下中起作用]和垂直方向[只对左右中起作用], 平铺可能会改变图片的大小, 而重复不会改变图片的大小。 四个角上的角边框图片是没有任何展示效果的, 不会平铺, 不会重复, 也不会拉伸。</p> <p>效果图</p> <div class="examples feature"> <div class="border-item border-img-4" style="float: left;margin-right: 50px"></div> <div class="border-item border-img-5" style="float: left"></div> </div> <p>代码示例</p> <div class="code feature"> <div class=examples> <span class=v>第一个效果图代码: </span><br> <span class=cv>border-image: </span><span class=d>url("border-image.png");</span><br> <span class=cv>border-image-slice: </span><span class=d>60;</span><br> <span class=cv>border-image-width: </span><span class=d>20px;</span><br> <span class=cv>border-image-outset: </span><span class=d>10px;</span><br> <span class=cv>border-image-repeat: </span><span class=d>repeat;</span><br><br> <span class=v>第二个效果图代码: </span><br> <span class=cv>border-image: </span><span class=d>url("border-image.png") 60 / 20px / 10px round;</span><br> </div> </div> </div> '}});
//# sourceMappingURL=12.build.js.map